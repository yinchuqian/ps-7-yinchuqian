{"version":3,"sources":["Project.js","About.js","Homepage.js","App.js","serviceWorker.js","index.js"],"names":["Project","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","inherits","createClass","key","value","_this2","d3","then","setState","list","map","react_default","a","createElement","reactstrap_es","sm","md","title","width","src","img","alt","text","href","link","className","Component","About","apply","arguments","Homepage","App","HashRouter","Link","to","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e00bb694.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport {\n    Card, CardImg, CardText, CardBody, CardLink,\n    CardTitle, Col\n} from 'reactstrap';\n\nexport class Project extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: [] }   \n    }\n\n    componentDidMount() {\n        d3.csv('data/data.csv').then((data) => {\n            this.setState({\n                data:data\n            });\n        })\n    }\n\n    render() {\n        let list = this.state.data.map((data) => {\n            return <Col sm=\"6\" md='6' key={data.title}>\n                <Card>\n                    <CardBody>\n                        <CardTitle>{data.title}</CardTitle>\n                    </CardBody>\n                    <CardImg width=\"100%\" src={data.img} alt={data.title} />\n                    <CardBody>\n                        <CardText>{data.text}</CardText>\n                        <CardLink href={data.link}>Click to Open</CardLink>\n                    </CardBody>\n                </Card>\n            </Col>\n        })\n        return (\n            <div>\n                <h1>My Project</h1>\n                <div className=\"container\">\n                <div className= \"row\">\n                {list}\n                </div>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem } from 'reactstrap';\nexport class About extends Component{\n\n\n    render(){\n        return(\n            <ListGroup>\n            <ListGroupItem>Favorite Sports: Basketball, Tennis</ListGroupItem>\n            <ListGroupItem>Favorite music: Jazz, popular</ListGroupItem>\n            <ListGroupItem>Favorite Singer: Chris Lee</ListGroupItem>\n            <ListGroupItem>Favorite Band: Maroon 5</ListGroupItem>\n          </ListGroup>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Jumbotron} from 'reactstrap';\nexport class Homepage extends Component{\n\n    render(){\n        return(\n            <div>\n      <Jumbotron>\n        <h1 className=\"display-3\">Hello, this is Chuqian Yin!</h1>\n        <p className=\"lead\">I am currently a junior student in University of Washington, major in INFO!</p>\n        <hr className=\"my-2\" />\n        <p>Hope you can know me better through this site!</p>\n       \n      </Jumbotron>\n    </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport { Project } from './Project.js';\nimport { About } from './About.js';\nimport { Homepage } from './Homepage.js';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n  render() {\n      return (\n          <Router>\n            <div className=\"container\">\n            <div className = \"row\">\n              <Link className=\"col badge badge-primary text-align-center\" to=\"/\">Home</Link>\n              { ' ' }\n              <Link className=\"col badge badge-primary text-align-center\" to=\"/project\">Projects</Link>\n              { ' ' }\n              <Link className=\"col badge badge-primary text-align-center\" to=\"/about\">About</Link>\n              </div>\n              <Route exact path=\"/\" component={ Homepage } />\n              <Route path=\"/project\" component={ Project } />\n              <Route path=\"/about\" component={ About } />\n              \n            </div>\n          </Router>\n          );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}